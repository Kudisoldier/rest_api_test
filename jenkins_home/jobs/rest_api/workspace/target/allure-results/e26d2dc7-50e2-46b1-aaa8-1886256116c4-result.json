{"name": "test_create_with_invalid_data[book_data2]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 201 == 400\n +  where 201 = ApiResponse(json={'book': {'author': False, 'id': 14, 'isElectronicBook': 2, 'name': 'asd', 'year': 'asd'}}, text='{\"b...lse,\"id\":14,\"isElectronicBook\":2,\"name\":\"asd\",\"year\":\"asd\"}}\\n', status_code=201, url='http://rest_api:5000/api/books').status_code", "trace": "client = <api.api_client.ApiClient object at 0xffffa7a90850>\nbook_data = ('asd', False, 2, 'asd')\n\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\"book_data\", [(2, 'asd'), (2, 2, 2, \"asd\"), ('asd', False, 2, \"asd\")])\n    def test_create_with_invalid_data(client, book_data):\n        \"\"\"Проверяем, что нельзя создать книгу с некорректными данными, нарушиющих типы\"\"\"\n        book_response = client.add_book(*book_data)\n>       assert book_response.status_code == 400\nE       assert 201 == 400\nE        +  where 201 = ApiResponse(json={'book': {'author': False, 'id': 14, 'isElectronicBook': 2, 'name': 'asd', 'year': 'asd'}}, text='{\"b...lse,\"id\":14,\"isElectronicBook\":2,\"name\":\"asd\",\"year\":\"asd\"}}\\n', status_code=201, url='http://rest_api:5000/api/books').status_code\n\n/code/test_API.py:96: AssertionError"}, "description": "Проверяем, что нельзя создать книгу с некорректными данными, нарушиющих типы", "parameters": [{"name": "book_data", "value": "('asd', False, 2, 'asd')"}], "start": 1676239755809, "stop": 1676239755818, "uuid": "d41d35b4-6deb-498f-ba7e-6ad547ad3cfd", "historyId": "7f4107221f9c87e56cd41594e291d252", "testCaseId": "0d2a4e16b7c113dbdc5907d1b75a2e47", "fullName": "test_API#test_create_with_invalid_data", "labels": [{"name": "tag", "value": "negative"}, {"name": "suite", "value": "test_API"}, {"name": "host", "value": "jenkins"}, {"name": "thread", "value": "832-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_API"}]}