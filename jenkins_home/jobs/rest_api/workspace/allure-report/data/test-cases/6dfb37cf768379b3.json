{"uid":"6dfb37cf768379b3","name":"Позитивный тест получения списка книг","fullName":"test_API#test_books_retrieval","historyId":"38eac17d3023f9d80b5a56188c6e5ced","time":{"start":1676242031558,"stop":1676242031589,"duration":31},"description":"Проверяем, что можно получить список книг и они соответствуют модели данных","descriptionHtml":"<p>Проверяем, что можно получить список книг и они соответствуют модели данных</p>\n","status":"broken","statusMessage":"pydantic.error_wrappers.ValidationError: 2 validation errors for Book\nisElectronicBook\n  value could not be parsed to a boolean (type=type_error.bool)\nyear\n  value is not a valid integer (type=type_error.integer)","statusTrace":"client = <api.api_client.ApiClient object at 0xffff9970b910>\n\n    @allure.title(\"Позитивный тест получения списка книг\")\n    @pytest.mark.positive\n    def test_books_retrieval(client):\n        \"\"\"Проверяем, что можно получить список книг и они соответствуют модели данных\"\"\"\n        books_response = client.get_books()\n        assert books_response.status_code == 200\n        for elem in books_response.json['books']:\n>           assert Book(**elem)\n\n/code/test_API.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n__pydantic_self__ = Book()\ndata = {'author': False, 'id': 6, 'isElectronicBook': 2, 'name': 'asd', ...}\nvalues = {'author': 'False', 'id': 6, 'name': 'asd'}\nfields_set = {'author', 'id', 'isElectronicBook', 'name', 'year'}\nvalidation_error = ValidationError(model='Book', errors=[{'loc': ('isElectronicBook',), 'msg': 'value could not be parsed to a boolean', 'type': 'type_error.bool'}, {'loc': ('year',), 'msg': 'value is not a valid integer', 'type': 'type_error.integer'}])\n\n    def __init__(__pydantic_self__, **data: Any) -> None:\n        \"\"\"\n        Create a new model by parsing and validating input data from keyword arguments.\n    \n        Raises ValidationError if the input data cannot be parsed to form a valid model.\n        \"\"\"\n        # Uses something other than `self` the first arg to allow \"self\" as a settable attribute\n        values, fields_set, validation_error = validate_model(__pydantic_self__.__class__, data)\n        if validation_error:\n>           raise validation_error\nE           pydantic.error_wrappers.ValidationError: 2 validation errors for Book\nE           isElectronicBook\nE             value could not be parsed to a boolean (type=type_error.bool)\nE           year\nE             value is not a valid integer (type=type_error.integer)\n\n/usr/local/lib/python3.9/dist-packages/pydantic/main.py:342: ValidationError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1676242031546,"stop":1676242031557,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Api client init","time":{"start":1676242031557,"stop":1676242031557,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"Api client init::0","time":{"start":1676242031613,"stop":1676242031613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"positive"},{"name":"suite","value":"test_API"},{"name":"host","value":"jenkins"},{"name":"thread","value":"887-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_API"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["positive"]},"source":"6dfb37cf768379b3.json","parameterValues":[]}